name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip tests for emergency deployments'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: read
  security-events: write
  pull-requests: write
  checks: write

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  # Security and dependency scanning
  security-scan:
    name: Security & Dependency Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better analysis

      - name: Run Dependency Review
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: csharp
          queries: security-and-quality

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore backend/src/Barberly.sln

      - name: Build for CodeQL
        run: dotnet build backend/src/Barberly.sln --no-restore

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Build and test matrix
  build-and-test:
    name: Build & Test
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        dotnet-version: ['8.0.x']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup .NET ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json', '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore backend/src/Barberly.sln

      - name: Build solution
        run: dotnet build backend/src/Barberly.sln --no-restore --configuration Release

      - name: Run unit tests
        if: ${{ !inputs.skip_tests }}
        run: |
          dotnet test backend/tests/Barberly.Domain.Tests/Barberly.Domain.Tests.csproj \
            --no-build --configuration Release \
            --logger trx --results-directory ./test-results \
            --collect:"XPlat Code Coverage" \
            --verbosity minimal

      - name: Run application tests
        if: ${{ !inputs.skip_tests }}
        run: |
          dotnet test backend/tests/Barberly.Application.Tests/Barberly.Application.Tests.csproj \
            --no-build --configuration Release \
            --logger trx --results-directory ./test-results \
            --collect:"XPlat Code Coverage" \
            --verbosity minimal

      - name: Run integration tests
        if: ${{ !inputs.skip_tests && matrix.os == 'ubuntu-latest' }}
        run: |
          dotnet test backend/tests/Barberly.IntegrationTests/Barberly.IntegrationTests.csproj \
            --no-build --configuration Release \
            --logger trx --results-directory ./test-results \
            --collect:"XPlat Code Coverage" \
            --verbosity minimal

      - name: Upload test results
        if: always() && !inputs.skip_tests
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.dotnet-version }}
          path: ./test-results
          retention-days: 7

      - name: Publish test results
        if: always() && !inputs.skip_tests && matrix.os == 'ubuntu-latest'
        uses: dorny/test-reporter@v1
        with:
          name: '.NET Test Results'
          path: './test-results/*.trx'
          reporter: dotnet-trx

  # Build and package artifacts
  package:
    name: Package Application
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'

    outputs:
      version: ${{ steps.version.outputs.version }}
      artifact-name: ${{ steps.artifact.outputs.name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json', '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Generate version
        id: version
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            VERSION="1.0.${{ github.run_number }}"
          else
            VERSION="1.0.${{ github.run_number }}-${{ github.ref_name }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      - name: Restore and publish API
        run: |
          dotnet restore backend/src/Barberly.sln
          dotnet publish backend/src/Barberly.Api/Barberly.Api.csproj \
            -c Release \
            -o ./publish/api \
            --no-restore \
            -p:Version=${{ steps.version.outputs.version }}

      - name: Create deployment package
        id: artifact
        run: |
          ARTIFACT_NAME="barberly-api-${{ steps.version.outputs.version }}-${{ github.sha }}"
          echo "name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT

          # Create deployment package with structure
          mkdir -p ./deployment
          cp -r ./publish/api ./deployment/

          # Add deployment scripts and configuration
          cat > ./deployment/version.txt << EOF
          Version: ${{ steps.version.outputs.version }}
          Commit: ${{ github.sha }}
          Branch: ${{ github.ref_name }}
          Built: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          EOF

          # Package everything
          tar -czf ./$ARTIFACT_NAME.tar.gz -C ./deployment .

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.name }}
          path: ./${{ steps.artifact.outputs.name }}.tar.gz
          retention-days: 30

  # Deploy to staging environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [package]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging')

    steps:
      - name: Download deployment artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.package.outputs.artifact-name }}

      - name: Extract deployment package
        run: |
          tar -xzf ${{ needs.package.outputs.artifact-name }}.tar.gz
          ls -la

      - name: Deploy to staging
        run: |
          echo "🚀 Deploying version ${{ needs.package.outputs.version }} to staging..."
          echo "📦 Artifact: ${{ needs.package.outputs.artifact-name }}"
          echo "🌐 URL: https://staging.barberly.app"
          # Add actual deployment commands here
          # Example: kubectl apply, docker deploy, etc.

      - name: Run staging smoke tests
        run: |
          echo "🧪 Running staging smoke tests..."
          # Add smoke tests here
          # curl -f https://staging.barberly.app/health || exit 1

  # Deploy to production environment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [package, deploy-staging]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')

    steps:
      - name: Download deployment artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.package.outputs.artifact-name }}

      - name: Extract deployment package
        run: |
          tar -xzf ${{ needs.package.outputs.artifact-name }}.tar.gz
          ls -la

      - name: Deploy to production
        run: |
          echo "🚀 Deploying version ${{ needs.package.outputs.version }} to production..."
          echo "📦 Artifact: ${{ needs.package.outputs.artifact-name }}"
          echo "🌐 URL: https://barberly.app"
          # Add actual deployment commands here

      - name: Run production health checks
        run: |
          echo "🔍 Running production health checks..."
          # Add health checks here
          # curl -f https://barberly.app/health || exit 1

      - name: Create GitHub release
        if: github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.package.outputs.version }}
          release_name: Release v${{ needs.package.outputs.version }}
          body: |
            ## Changes in v${{ needs.package.outputs.version }}

            - Build: ${{ github.sha }}
            - Branch: ${{ github.ref_name }}
            - Deployed: $(date -u '+%Y-%m-%d %H:%M:%S UTC')

            ### Deployment Artifacts
            - API: ${{ needs.package.outputs.artifact-name }}
          draft: false
          prerelease: false
