name: Frontend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'web/**'
      - '.github/workflows/frontend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'web/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip tests for emergency deployments'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: read
  security-events: write
  pull-requests: write
  checks: write
  pages: write
  id-token: write

env:
  NODE_VERSION: '20.x'
  NPM_CONFIG_CACHE: ~/.npm

jobs:
  # Security and dependency scanning
  security-scan:
    name: Security & Dependency Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Dependency Review
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './web/barberly-web/package-lock.json'

      - name: Install dependencies
        working-directory: ./web/barberly-web
        run: npm ci

      - name: Run security audit
        working-directory: ./web/barberly-web
        run: |
          npm audit --audit-level high
          npx audit-ci --config ./audit-ci.json || true

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Build and test matrix
  build-and-test:
    name: Build & Test
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        node-version: ['18.x', '20.x']
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: './web/barberly-web/package-lock.json'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ./web/barberly-web/node_modules
            ./web/barberly-web/.next/cache
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            ${{ runner.os }}-node-

      - name: Install dependencies
        working-directory: ./web/barberly-web
        run: npm ci

      - name: Lint code
        if: ${{ !inputs.skip_tests }}
        working-directory: ./web/barberly-web
        run: |
          npm run lint
          npm run type-check

      - name: Run unit tests
        if: ${{ !inputs.skip_tests }}
        working-directory: ./web/barberly-web
        run: |
          npm run test:coverage -- --reporter=junit --outputFile=./test-results/unit-tests.xml

      - name: Run component tests
        if: ${{ !inputs.skip_tests && matrix.os == 'ubuntu-latest' }}
        working-directory: ./web/barberly-web
        run: |
          npm run test || true

      - name: Build application
        working-directory: ./web/barberly-web
        env:
          NODE_ENV: production
          GENERATE_SOURCEMAP: false
        run: npm run build

      - name: Run build analysis
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20.x'
        working-directory: ./web/barberly-web
        run: |
          npm run analyze || true
          
      - name: Upload test results
        if: always() && !inputs.skip_tests
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.node-version }}
          path: ./web/barberly-web/test-results
          retention-days: 7

      - name: Upload coverage reports
        if: always() && !inputs.skip_tests && matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ matrix.node-version }}
          path: ./web/barberly-web/coverage
          retention-days: 7

      - name: Publish test results
        if: always() && !inputs.skip_tests && matrix.os == 'ubuntu-latest'
        uses: dorny/test-reporter@v1
        with:
          name: 'Frontend Test Results'
          path: './web/barberly-web/test-results/*.xml'
          reporter: jest-junit

  # E2E testing
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: ${{ !inputs.skip_tests && (github.event_name == 'pull_request' || github.ref == 'refs/heads/main') }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './web/barberly-web/package-lock.json'

      - name: Install dependencies
        working-directory: ./web/barberly-web
        run: npm ci

      - name: Install Playwright browsers
        working-directory: ./web/barberly-web
        run: npx playwright install --with-deps

      - name: Build application
        working-directory: ./web/barberly-web
        run: npm run build

      - name: Start application
        working-directory: ./web/barberly-web
        run: |
          npm run preview &
          sleep 10

      - name: Run E2E tests
        working-directory: ./web/barberly-web
        run: |
          npm run e2e

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            ./web/barberly-web/test-results/
            ./web/barberly-web/playwright-report/
          retention-days: 7

  # Performance testing
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './web/barberly-web/package-lock.json'

      - name: Install dependencies
        working-directory: ./web/barberly-web
        run: npm ci

      - name: Build application
        working-directory: ./web/barberly-web
        run: npm run build

      - name: Run Lighthouse CI
        working-directory: ./web/barberly-web
        run: |
          npm install -g @lhci/cli
          lhci autorun || true

      - name: Upload performance results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: ./web/barberly-web/.lighthouseci
          retention-days: 7

  # Package application
  package:
    name: Package Application
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      artifact-name: ${{ steps.artifact.outputs.name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './web/barberly-web/package-lock.json'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ./web/barberly-web/node_modules
            ./web/barberly-web/.next/cache
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-
            ${{ runner.os }}-node-

      - name: Generate version
        id: version
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            VERSION="1.0.${{ github.run_number }}"
          else
            VERSION="1.0.${{ github.run_number }}-${{ github.ref_name }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      - name: Install dependencies
        working-directory: ./web/barberly-web
        run: npm ci

      - name: Build production application
        working-directory: ./web/barberly-web
        env:
          NODE_ENV: production
          GENERATE_SOURCEMAP: false
          NEXT_PUBLIC_VERSION: ${{ steps.version.outputs.version }}
        run: npm run build

      - name: Create deployment package
        id: artifact
        working-directory: ./web/barberly-web
        run: |
          ARTIFACT_NAME="barberly-web-${{ steps.version.outputs.version }}-${{ github.sha }}"
          echo "name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
          
          # Create deployment package
          mkdir -p ./deployment
          cp -r ./.next ./deployment/
          cp -r ./public ./deployment/
          cp package.json ./deployment/
          cp next.config.js ./deployment/ || true
          
          # Add deployment metadata
          cat > ./deployment/version.json << EOF
          {
            "version": "${{ steps.version.outputs.version }}",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "buildDate": "$(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          }
          EOF
          
          # Package everything
          tar -czf ../$ARTIFACT_NAME.tar.gz -C ./deployment .

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.name }}
          path: ./web/${{ steps.artifact.outputs.name }}.tar.gz
          retention-days: 30

  # Deploy to staging environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [package, e2e-tests]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging')

    steps:
      - name: Download deployment artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.package.outputs.artifact-name }}

      - name: Extract deployment package
        run: |
          tar -xzf ${{ needs.package.outputs.artifact-name }}.tar.gz
          ls -la

      - name: Deploy to staging
        run: |
          echo "🚀 Deploying frontend v${{ needs.package.outputs.version }} to staging..."
          echo "📦 Artifact: ${{ needs.package.outputs.artifact-name }}"
          echo "🌐 URL: https://staging.barberly.app"
          # Add actual deployment commands here
          # Example: rsync, S3 sync, Vercel deploy, etc.

      - name: Run staging smoke tests
        run: |
          echo "🧪 Running staging smoke tests..."
          # Add smoke tests here
          # curl -f https://staging.barberly.app || exit 1

  # Deploy to production environment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [package, deploy-staging, performance-test]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')

    steps:
      - name: Download deployment artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.package.outputs.artifact-name }}

      - name: Extract deployment package
        run: |
          tar -xzf ${{ needs.package.outputs.artifact-name }}.tar.gz
          ls -la

      - name: Deploy to production
        run: |
          echo "🚀 Deploying frontend v${{ needs.package.outputs.version }} to production..."
          echo "📦 Artifact: ${{ needs.package.outputs.artifact-name }}"
          echo "🌐 URL: https://barberly.app"
          # Add actual deployment commands here

      - name: Run production health checks
        run: |
          echo "🔍 Running production health checks..."
          # Add health checks here
          # curl -f https://barberly.app || exit 1

      - name: Update deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Production deployment successful"
          else
            echo "❌ Production deployment failed"
            # Add rollback commands here
          fi
